// <auto-generated />
using System;
using Messenger.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Messenger.Services.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221016054548_CreateDatabase")]
    partial class CreateDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Messenger.Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.BanUserByChat", b =>
                {
                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BanDateOfExpire")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ChatId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BanUserByChats");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarLink")
                        .HasColumnType("text");

                    b.Property<Guid?>("LastMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LastMessageId")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.ChatUser", b =>
                {
                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("CanSendMedia")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("MuteDateOfExpire")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ChatId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatUsers");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.DeletedDialogByUser", b =>
                {
                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ChatId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("DeletedDialogByUsers");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.DeletedMessageByUser", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("MessageId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("DeletedMessageByUsers");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReplyToMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ReplyToMessageId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.RoleUserByChat", b =>
                {
                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("CanAddAndRemoveUserToConversation")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanBanUser")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanChangeChatData")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanGivePermissionToUser")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleColor")
                        .HasColumnType("integer");

                    b.Property<string>("RoleTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ChatId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUserByChats");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarLink")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("Messenger.Domain.Entities.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.BanUserByChat", b =>
                {
                    b.HasOne("Messenger.Domain.Entities.Chat", "Chat")
                        .WithMany("BanUserByChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.Domain.Entities.User", "User")
                        .WithMany("BanUserByChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.Chat", b =>
                {
                    b.HasOne("Messenger.Domain.Entities.Message", "LastMessage")
                        .WithOne("LastMessageByChat")
                        .HasForeignKey("Messenger.Domain.Entities.Chat", "LastMessageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Messenger.Domain.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("LastMessage");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.ChatUser", b =>
                {
                    b.HasOne("Messenger.Domain.Entities.Chat", "Chat")
                        .WithMany("ChatUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.Domain.Entities.User", "User")
                        .WithMany("ChatUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.DeletedDialogByUser", b =>
                {
                    b.HasOne("Messenger.Domain.Entities.Chat", "Chat")
                        .WithMany("DeletedDialogByUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.Domain.Entities.User", "User")
                        .WithMany("DeletedDialogByUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.DeletedMessageByUser", b =>
                {
                    b.HasOne("Messenger.Domain.Entities.Message", "Message")
                        .WithMany("DeletedMessageByUsers")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.Domain.Entities.User", "User")
                        .WithMany("DeletedMessageByUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.Message", b =>
                {
                    b.HasOne("Messenger.Domain.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.Domain.Entities.User", "Owner")
                        .WithMany("Messages")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Messenger.Domain.Entities.Message", "ReplyToMessage")
                        .WithMany()
                        .HasForeignKey("ReplyToMessageId");

                    b.Navigation("Chat");

                    b.Navigation("Owner");

                    b.Navigation("ReplyToMessage");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.RoleUserByChat", b =>
                {
                    b.HasOne("Messenger.Domain.Entities.Chat", null)
                        .WithMany("RoleUserByChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.Domain.Entities.User", null)
                        .WithMany("RoleUserByChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.Domain.Entities.ChatUser", "ChatUser")
                        .WithOne("Role")
                        .HasForeignKey("Messenger.Domain.Entities.RoleUserByChat", "ChatId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatUser");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.Chat", b =>
                {
                    b.Navigation("BanUserByChats");

                    b.Navigation("ChatUsers");

                    b.Navigation("DeletedDialogByUsers");

                    b.Navigation("Messages");

                    b.Navigation("RoleUserByChats");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.ChatUser", b =>
                {
                    b.Navigation("Role");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.Message", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("DeletedMessageByUsers");

                    b.Navigation("LastMessageByChat");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.User", b =>
                {
                    b.Navigation("BanUserByChats");

                    b.Navigation("ChatUsers");

                    b.Navigation("DeletedDialogByUsers");

                    b.Navigation("DeletedMessageByUsers");

                    b.Navigation("Messages");

                    b.Navigation("RoleUserByChats");
                });
#pragma warning restore 612, 618
        }
    }
}
